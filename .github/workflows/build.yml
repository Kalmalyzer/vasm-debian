
name: Build

on:
  push:
    # Always build when there are new commits to master
    branches:
      - master
    # Always build release-tags
    tags:
      - 'releases/**'
  # Always build pull requests
  pull_request:
    branches:
      - '**'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: install prerequisites
        run: sudo apt-get update && sudo apt-get -y install debhelper devscripts libevent-dev
      - name: build .deb
        run: |
          sudo DEBUILD_DPKG_BUILDPACKAGE_OPTS="-r'fakeroot --faked faked-tcp' -us -uc" DEBUILD_LINTIAN_OPTS="-i -I --show-overrides" sudo debuild --no-conf -us -uc
          make package
      - name: upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: linux-deb-package
          path: build_results

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: build executables
        run: |
          .\set-msvc-path.ps1
          if ((Start-Process nmake.exe -ArgumentList clean,download,build,package -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows-binaries
          path: build_results

  release:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/'))
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-linux, build-windows]
    steps:
      - name: Download linux-deb-package
        uses: actions/download-artifact@v1
        with:
          name: linux-deb-package
      - name: Download windows-binaries
        uses: actions/download-artifact@v1
        with:
          name: windows-binaries
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload linux-deb-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux-deb-package/linux-deb-package.zip
          asset_name: linux-deb-package.zip
          asset_content_type: application/zip
      - name: Upload windows-binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows-binaries/windows-binaries.zip
          asset_name: windows-binaries.zip
          asset_content_type: application/zip
