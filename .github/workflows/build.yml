
name: Build

on:
  push:
    # Always build when there are new commits to master
    branches:
      - master
    # Always build release-tags
    tags:
      - 'releases/**'
  # Always build pull requests
  pull_request:
    branches:
      - '**'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-16.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: Install prerequisites
        run: sudo apt-get update && sudo apt-get -y install debhelper devscripts libevent-dev
      - name: Build executables
        run: DISTRIBUTION=xenial make clean download build
      - name: Create packages
        run: DISTRIBUTION=xenial make package
      - name: Test packages
        run: DISTRIBUTION=xenial make test
      - name: Extract changelog
        run: make extract-changelog
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: linux-artifacts
          path: build_results

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
      - name: Build executables
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          if ((Start-Process nmake.exe -ArgumentList clean,download,build -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Create packages
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          .\windows\scripts\set-wix-path.ps1
          if ((Start-Process nmake.exe -ArgumentList package -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Test packages
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          if ((Start-Process nmake.exe -ArgumentList test-packages -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows-artifacts
          path: build_results

  release:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/'))
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-linux, build-windows]
    steps:
      - name: Get branch info
        id: branch_info
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=SOURCE_VERSION::${GITHUB_REF#refs/tags/releases/}
          echo ::set-output name=SOURCE_ORGANIZATION::$(echo ${{ github.repository }} | cut -d / -f 1)
          # These can be accessed as ${{ steps.branch_info.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Download linux-artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-artifacts
      - name: Download windows-artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows-artifacts
      - name: Parse changelog
        id: parse_changelog
        run: echo ::set-output name=CHANGELOG_FOR_VERSION::'`cat linux-artifacts/changelog-for-version`'
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.branch_info.outputs.SOURCE_VERSION }}
          draft: false
          prerelease: false
          body: ${{ steps.parse_changelog.outputs.CHANGELOG_FOR_VERSION }}
      - name: Upload linux-deb-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux-artifacts/vasmm68k_${{ steps.branch_info.outputs.SOURCE_VERSION }}_amd64.xenial.deb
          asset_name: vasmm68k_${{ steps.branch_info.outputs.SOURCE_VERSION }}_amd64.xenial.deb
          asset_content_type: application/gzip
      - name: Upload windows-binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows-artifacts/vasmm68k-${{ steps.branch_info.outputs.SOURCE_VERSION }}-windows-binaries.zip
          asset_name: vasmm68k-${{ steps.branch_info.outputs.SOURCE_VERSION }}-windows-binaries.zip
          asset_content_type: application/zip
      - name: Upload windows installer
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows-artifacts/vasmm68k-${{ steps.branch_info.outputs.SOURCE_VERSION }}-windows-installer.msi
          asset_name: vasmm68k-${{ steps.branch_info.outputs.SOURCE_VERSION }}-windows-installer.msi
          asset_content_type: application/octet-stream
      
      # Disabled publishing of Chocolatey package for now.
      # The file name is not based on VASM_VERSION but on VASM_PACKAGE_VERSION
      #   and thus we need logic to translate SOURCE_VERSION from the former to the latter format to make this step work.
      #
      # - name: Upload windows Chocolatey package
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./windows-binaries/vasmm68k.${{ steps.branch_info.outputs.SOURCE_VERSION }}.nupkg
      #     asset_name: vasmm68k.${{ steps.branch_info.outputs.SOURCE_VERSION }}.nupkg
      #     asset_content_type: application/octet-stream

      - name: Publish Linux deb package to Apt repository
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.APT_PUBLISHER_TOKEN }}
          repository: ${{ steps.branch_info.outputs.SOURCE_ORGANIZATION }}/apt
          event-type: add-deb-package
          client-payload: '{ "download_url": "https://github.com/${{ steps.branch_info.outputs.SOURCE_ORGANIZATION }}/vasmm68k/releases/download/releases%2F${{ steps.branch_info.outputs.SOURCE_VERSION }}/vasmm68k_${{ steps.branch_info.outputs.SOURCE_VERSION }}_amd64.xenial.deb", "distribution": "xenial" }'
